<?php
/**
 * Created by PhpStorm.
 * User: 旭
 * Date: 2019/5/19
 * Time: 19:41
 */

namespace app\index\controller;

use think\Controller;
use think\Request;
use think\Session;
use think\View;
use app\index\model\Usersdata;

class Users extends Controller
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (Session::has("admin_name") && Session::has("admin_id")) {
            //记录访客信息
        } else {
            //提示登陆
            $this->redirect('index/login/login');
        }

    }

    public function management()
    {
//        设置查询表达式
        $map['users_id'] = ['>', 0];
//        限制输出字段
        $field['users_id'] = 'users_id';
        $field['users_name'] = 'users_name';
        $field['users_real_name'] = 'users_real_name';
        $field['users_gender'] = 'users_gender';
        $field['users_phone'] = 'users_phone';
        $field['users_state'] = 'users_state';
        $field['users_email'] = 'users_email';
        $field['users_last_landing'] = 'users_last_landing';
//        向页面输出数据
        $list_row = 6;
        $res = Usersdata::field($field)->where($map)->paginate($list_row);

//        一共多少条
        $item = count(Usersdata::all());
        $this->assign('res', $res);
        $this->assign('long', $list_row);
        $this->assign('item', $item);
        $this->assign('title', '用户管理');
        $this->assign('small_title', '用户列表');
        return $this->fetch();
    }

    public function ajax_update_form()
    {
        $request = Request::instance();
        if ($request->isAjax()) {
//            记录错误信息
            $error_res = [];
//          设置查询表达式
            $map = [];

            $find_item_class = $request->post('find_item_class');
            switch ($find_item_class) {
                case 0:
                    $users_real_name = $request->post('users_real_name');

                    $data = [
                        'users_real_name' => $users_real_name,
                    ];

                    $judgement_res = $this->validate($data, 'Users.users_real_name');
//                    验证器通过后执行
                    if (true !== $judgement_res) {
                        $error_res['error_real_name'] = $judgement_res;
                    } else {
                        $map['users_real_name'] = ['=', $users_real_name];
                    }
                    break;
                case 1:
                    $users_phone = $request->post('users_phone');
                    $data = [
                        'users_phone' => $users_phone,
                    ];

                    $judgement_res = $this->validate($data, 'Users.users_phone');
//                    验证器通过后执行
                    if (true !== $judgement_res) {
                        $error_res['error_users_phone'] = $judgement_res;
                    } else {
                        $map['users_phone'] = ['=', $users_phone];
                    }

                    break;
                case 2:
                    $users_email = $request->post('users_email');
                    $data = [
                        'users_email' => $users_email,
                    ];

                    $judgement_res = $this->validate($data, 'Users.users_email');
//                    验证器通过后执行
                    if (true !== $judgement_res) {
                        $error_res['error_users_email'] = $judgement_res;
                    } else {
                        $map['users_email'] = ['=', $users_email];
                    }
                    break;
                case 3:
                    $users_name = $request->post('users_name');
                    $data = [
                        'users_name' => $users_name,
                    ];

                    $judgement_res = $this->validate($data, 'Users.users_name');
//                    验证器通过后执行
                    if (true !== $judgement_res) {
                        $error_res['error_users_name'] = $judgement_res;
                    } else {
                        $map['users_name'] = ['=', $users_name];
                    }
                    break;
                default:

                    break;

            }
//            额外条件

            $users_gender = $request->post('users_gender');
            $users_state = $request->post('users_state');
            $users_start_time = $request->post('users_start_time');
            $users_end_time = $request->post('users_end_time');

            if (!empty($users_gender)) {
                $map['users_gender'] = ['=', $users_gender];
            }
            if (!empty($users_state)) {
                $map['users_state'] = ['=', $users_state];
            }
            if (!empty($users_start_time) && !empty($users_end_time)) {
                if (strtotime($users_start_time) > strtotime($users_end_time)) {
                    $error_res['error_time'] = '请选择开始日期小于结束日期的时间';
                } else {

                    if (strtotime($users_start_time) <= strtotime(date('Y-m-d ', time())) && strtotime($users_end_time) <= strtotime(date('Y-m-d', time()))) {
                        $map['users_last_landing'] = ['between', [$users_start_time, $users_end_time]];
                    } else {
                        $error_res['error_time'] = '请选择小于当前日期的时间';
                    }
                }
            }
            if (!empty($users_start_time) && empty($users_end_time)) {

                if (strtotime($users_start_time) <= strtotime(date('Y-m-d ', time()))) {
                    $map['users_last_landing'] = ['>=', $users_start_time];
                } else {
                    $error_res['error_time'] = '请选择小于当前日期的时间';
                }
            }
            if (!empty($users_end_time) && empty($users_start_time)) {
                if (strtotime($users_end_time) <= strtotime(date('Y-m-d', time()))) {

                    $map['users_last_landing'] = ['<=', $users_end_time];
                } else {
                    $error_res['error_time'] = '请选择小于当前日期的时间';
                }
            }
            if (!empty($error_res)) {
//              empty  空返回true 非空返回false 无错误执行else中的内容
                return $error_res;
            } else {
//                执行数据库查询
                $field['users_id'] = 'users_id';
                $field['users_name'] = 'users_name';
                $field['users_real_name'] = 'users_real_name';
                $field['users_gender'] = 'users_gender';
                $field['users_phone'] = 'users_phone';
                $field['users_state'] = 'users_state';
                $field['users_email'] = 'users_email';
                $field['users_last_landing'] = 'users_last_landing';

                $res = Usersdata::field($field)->where($map)->select();

                foreach ($res as $data) {
                    //getData()可以获取数据对象原始数据:$data属性值
                    $ajax_res [] = $data->getData();
                }

                if (!empty($ajax_res)) {
                    return $ajax_res;
                } else {
                    $i = ['no_item' => '没有记录'];
                    return $i;
                }

            }
        }

    }

    public function ajax_update_state()
    {
        $requert = Request::instance();
        if ($requert->isAjax()) {
//            记录错误信息
            $error_res = [];
//            记录更新信息
            $ajax_update_res = [];

            $edit = $requert->post('edit_order');
            $users_id = $requert->post('users_id');

            $map['users_id'] = ['=', $users_id];
            $map['users_state'] = ['=', $edit];

            $res = Usersdata::where($map)->select();
            if (!empty($res)) {
                switch ($edit) {
                    case 0:
                        $error_res['same_state'] = '用户已经为自由发言状态,不需要更改';
                        break;
                    case 1:
                        $error_res['same_state'] = '用户已经为禁言状态,不需要更改';
                        break;
                    case 2 :
                        $error_res['same_state'] = '用户已经为封号状态,不需要更改';
                        break;
                    default:
//                             nothing
                        break;
                }
            } else {
//                当前非此状态 可以进行更新
                $where['users_id'] =['=',$users_id];
                $data['users_state'] = $edit;
                $update_res = Usersdata::where($where)->Update($data);
                if (!empty($update_res)) {
                    switch ($edit) {
                        case 0:
                            $ajax_update_res['success_update'] = '设置用户自由发言操作成功';
                            break;
                        case 1:
                            $ajax_update_res['success_update'] = '设置用户禁言操作成功';
                            break;
                        case 2 :
                            $ajax_update_res['success_update'] = '设置用户封号操作成功';
                            break;
                        default:
//                             nothing
                            break;
                    }
                } else {
                    $error_res['no_item'] = '没有符合更新条件的数据';
                }
            }
            if (!empty($error_res)){
                return $error_res;
            }else{
                return $ajax_update_res;
            }

        }
    }

}